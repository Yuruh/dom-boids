// source: map.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Protobuf.Boid', null, global);
goog.exportSymbol('proto.Protobuf.Flock', null, global);
goog.exportSymbol('proto.Protobuf.Input', null, global);
goog.exportSymbol('proto.Protobuf.Map', null, global);
goog.exportSymbol('proto.Protobuf.Output', null, global);
goog.exportSymbol('proto.Protobuf.Pos2D', null, global);
goog.exportSymbol('proto.Protobuf.Simulation', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.Map = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.Map, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protobuf.Map.displayName = 'proto.Protobuf.Map';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.Pos2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.Pos2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protobuf.Pos2D.displayName = 'proto.Protobuf.Pos2D';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.Boid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.Boid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protobuf.Boid.displayName = 'proto.Protobuf.Boid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.Flock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protobuf.Flock.repeatedFields_, null);
};
goog.inherits(proto.Protobuf.Flock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protobuf.Flock.displayName = 'proto.Protobuf.Flock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.Input = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.Input, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protobuf.Input.displayName = 'proto.Protobuf.Input';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.Simulation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Protobuf.Simulation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protobuf.Simulation.displayName = 'proto.Protobuf.Simulation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protobuf.Output = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Protobuf.Output.repeatedFields_, null);
};
goog.inherits(proto.Protobuf.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protobuf.Output.displayName = 'proto.Protobuf.Output';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.Map.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.Map.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.Map} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Map.toObject = function(includeInstance, msg) {
  var f, obj = {
    dimensions: (f = msg.getDimensions()) && proto.Protobuf.Pos2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.Map}
 */
proto.Protobuf.Map.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.Map;
  return proto.Protobuf.Map.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.Map} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.Map}
 */
proto.Protobuf.Map.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protobuf.Pos2D;
      reader.readMessage(value,proto.Protobuf.Pos2D.deserializeBinaryFromReader);
      msg.setDimensions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.Map.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.Map.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.Map} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Map.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDimensions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Protobuf.Pos2D.serializeBinaryToWriter
    );
  }
};


/**
 * optional Pos2D dimensions = 1;
 * @return {?proto.Protobuf.Pos2D}
 */
proto.Protobuf.Map.prototype.getDimensions = function() {
  return /** @type{?proto.Protobuf.Pos2D} */ (
    jspb.Message.getWrapperField(this, proto.Protobuf.Pos2D, 1));
};


/**
 * @param {?proto.Protobuf.Pos2D|undefined} value
 * @return {!proto.Protobuf.Map} returns this
*/
proto.Protobuf.Map.prototype.setDimensions = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protobuf.Map} returns this
 */
proto.Protobuf.Map.prototype.clearDimensions = function() {
  return this.setDimensions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protobuf.Map.prototype.hasDimensions = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.Pos2D.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.Pos2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.Pos2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Pos2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.Pos2D}
 */
proto.Protobuf.Pos2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.Pos2D;
  return proto.Protobuf.Pos2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.Pos2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.Pos2D}
 */
proto.Protobuf.Pos2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.Pos2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.Pos2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.Pos2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Pos2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Protobuf.Pos2D.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Protobuf.Pos2D} returns this
 */
proto.Protobuf.Pos2D.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Protobuf.Pos2D.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Protobuf.Pos2D} returns this
 */
proto.Protobuf.Pos2D.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.Boid.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.Boid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.Boid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Boid.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.Protobuf.Pos2D.toObject(includeInstance, f),
    direction: (f = msg.getDirection()) && proto.Protobuf.Pos2D.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.Boid}
 */
proto.Protobuf.Boid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.Boid;
  return proto.Protobuf.Boid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.Boid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.Boid}
 */
proto.Protobuf.Boid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protobuf.Pos2D;
      reader.readMessage(value,proto.Protobuf.Pos2D.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new proto.Protobuf.Pos2D;
      reader.readMessage(value,proto.Protobuf.Pos2D.deserializeBinaryFromReader);
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.Boid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.Boid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.Boid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Boid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Protobuf.Pos2D.serializeBinaryToWriter
    );
  }
  f = message.getDirection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Protobuf.Pos2D.serializeBinaryToWriter
    );
  }
};


/**
 * optional Pos2D position = 1;
 * @return {?proto.Protobuf.Pos2D}
 */
proto.Protobuf.Boid.prototype.getPosition = function() {
  return /** @type{?proto.Protobuf.Pos2D} */ (
    jspb.Message.getWrapperField(this, proto.Protobuf.Pos2D, 1));
};


/**
 * @param {?proto.Protobuf.Pos2D|undefined} value
 * @return {!proto.Protobuf.Boid} returns this
*/
proto.Protobuf.Boid.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protobuf.Boid} returns this
 */
proto.Protobuf.Boid.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protobuf.Boid.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Pos2D direction = 2;
 * @return {?proto.Protobuf.Pos2D}
 */
proto.Protobuf.Boid.prototype.getDirection = function() {
  return /** @type{?proto.Protobuf.Pos2D} */ (
    jspb.Message.getWrapperField(this, proto.Protobuf.Pos2D, 2));
};


/**
 * @param {?proto.Protobuf.Pos2D|undefined} value
 * @return {!proto.Protobuf.Boid} returns this
*/
proto.Protobuf.Boid.prototype.setDirection = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protobuf.Boid} returns this
 */
proto.Protobuf.Boid.prototype.clearDirection = function() {
  return this.setDirection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protobuf.Boid.prototype.hasDirection = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protobuf.Flock.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.Flock.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.Flock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.Flock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Flock.toObject = function(includeInstance, msg) {
  var f, obj = {
    boidsList: jspb.Message.toObjectList(msg.getBoidsList(),
    proto.Protobuf.Boid.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.Flock}
 */
proto.Protobuf.Flock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.Flock;
  return proto.Protobuf.Flock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.Flock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.Flock}
 */
proto.Protobuf.Flock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protobuf.Boid;
      reader.readMessage(value,proto.Protobuf.Boid.deserializeBinaryFromReader);
      msg.addBoids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.Flock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.Flock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.Flock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Flock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Protobuf.Boid.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Boid boids = 1;
 * @return {!Array<!proto.Protobuf.Boid>}
 */
proto.Protobuf.Flock.prototype.getBoidsList = function() {
  return /** @type{!Array<!proto.Protobuf.Boid>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Protobuf.Boid, 1));
};


/**
 * @param {!Array<!proto.Protobuf.Boid>} value
 * @return {!proto.Protobuf.Flock} returns this
*/
proto.Protobuf.Flock.prototype.setBoidsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protobuf.Boid=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protobuf.Boid}
 */
proto.Protobuf.Flock.prototype.addBoids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protobuf.Boid, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protobuf.Flock} returns this
 */
proto.Protobuf.Flock.prototype.clearBoidsList = function() {
  return this.setBoidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.Input.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.Input.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.Input} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Input.toObject = function(includeInstance, msg) {
  var f, obj = {
    map: (f = msg.getMap()) && proto.Protobuf.Map.toObject(includeInstance, f),
    flock: (f = msg.getFlock()) && proto.Protobuf.Flock.toObject(includeInstance, f),
    refreshrate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    secondsofsimulation: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.Input}
 */
proto.Protobuf.Input.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.Input;
  return proto.Protobuf.Input.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.Input} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.Input}
 */
proto.Protobuf.Input.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protobuf.Map;
      reader.readMessage(value,proto.Protobuf.Map.deserializeBinaryFromReader);
      msg.setMap(value);
      break;
    case 2:
      var value = new proto.Protobuf.Flock;
      reader.readMessage(value,proto.Protobuf.Flock.deserializeBinaryFromReader);
      msg.setFlock(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRefreshrate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecondsofsimulation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.Input.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.Input.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.Input} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Input.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMap();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Protobuf.Map.serializeBinaryToWriter
    );
  }
  f = message.getFlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Protobuf.Flock.serializeBinaryToWriter
    );
  }
  f = message.getRefreshrate();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSecondsofsimulation();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional Map map = 1;
 * @return {?proto.Protobuf.Map}
 */
proto.Protobuf.Input.prototype.getMap = function() {
  return /** @type{?proto.Protobuf.Map} */ (
    jspb.Message.getWrapperField(this, proto.Protobuf.Map, 1));
};


/**
 * @param {?proto.Protobuf.Map|undefined} value
 * @return {!proto.Protobuf.Input} returns this
*/
proto.Protobuf.Input.prototype.setMap = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protobuf.Input} returns this
 */
proto.Protobuf.Input.prototype.clearMap = function() {
  return this.setMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protobuf.Input.prototype.hasMap = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Flock flock = 2;
 * @return {?proto.Protobuf.Flock}
 */
proto.Protobuf.Input.prototype.getFlock = function() {
  return /** @type{?proto.Protobuf.Flock} */ (
    jspb.Message.getWrapperField(this, proto.Protobuf.Flock, 2));
};


/**
 * @param {?proto.Protobuf.Flock|undefined} value
 * @return {!proto.Protobuf.Input} returns this
*/
proto.Protobuf.Input.prototype.setFlock = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protobuf.Input} returns this
 */
proto.Protobuf.Input.prototype.clearFlock = function() {
  return this.setFlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protobuf.Input.prototype.hasFlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 refreshRate = 3;
 * @return {number}
 */
proto.Protobuf.Input.prototype.getRefreshrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protobuf.Input} returns this
 */
proto.Protobuf.Input.prototype.setRefreshrate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 secondsOfSimulation = 4;
 * @return {number}
 */
proto.Protobuf.Input.prototype.getSecondsofsimulation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Protobuf.Input} returns this
 */
proto.Protobuf.Input.prototype.setSecondsofsimulation = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.Simulation.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.Simulation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.Simulation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Simulation.toObject = function(includeInstance, msg) {
  var f, obj = {
    flock: (f = msg.getFlock()) && proto.Protobuf.Flock.toObject(includeInstance, f),
    elapsedtimesecond: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.Simulation}
 */
proto.Protobuf.Simulation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.Simulation;
  return proto.Protobuf.Simulation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.Simulation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.Simulation}
 */
proto.Protobuf.Simulation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protobuf.Flock;
      reader.readMessage(value,proto.Protobuf.Flock.deserializeBinaryFromReader);
      msg.setFlock(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setElapsedtimesecond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.Simulation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.Simulation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.Simulation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Simulation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Protobuf.Flock.serializeBinaryToWriter
    );
  }
  f = message.getElapsedtimesecond();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional Flock flock = 1;
 * @return {?proto.Protobuf.Flock}
 */
proto.Protobuf.Simulation.prototype.getFlock = function() {
  return /** @type{?proto.Protobuf.Flock} */ (
    jspb.Message.getWrapperField(this, proto.Protobuf.Flock, 1));
};


/**
 * @param {?proto.Protobuf.Flock|undefined} value
 * @return {!proto.Protobuf.Simulation} returns this
*/
proto.Protobuf.Simulation.prototype.setFlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protobuf.Simulation} returns this
 */
proto.Protobuf.Simulation.prototype.clearFlock = function() {
  return this.setFlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protobuf.Simulation.prototype.hasFlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float elapsedTimeSecond = 2;
 * @return {number}
 */
proto.Protobuf.Simulation.prototype.getElapsedtimesecond = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Protobuf.Simulation} returns this
 */
proto.Protobuf.Simulation.prototype.setElapsedtimesecond = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Protobuf.Output.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protobuf.Output.prototype.toObject = function(opt_includeInstance) {
  return proto.Protobuf.Output.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protobuf.Output} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Output.toObject = function(includeInstance, msg) {
  var f, obj = {
    simulationsList: jspb.Message.toObjectList(msg.getSimulationsList(),
    proto.Protobuf.Simulation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protobuf.Output}
 */
proto.Protobuf.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protobuf.Output;
  return proto.Protobuf.Output.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protobuf.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protobuf.Output}
 */
proto.Protobuf.Output.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Protobuf.Simulation;
      reader.readMessage(value,proto.Protobuf.Simulation.deserializeBinaryFromReader);
      msg.addSimulations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protobuf.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protobuf.Output.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protobuf.Output} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protobuf.Output.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimulationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Protobuf.Simulation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Simulation simulations = 1;
 * @return {!Array<!proto.Protobuf.Simulation>}
 */
proto.Protobuf.Output.prototype.getSimulationsList = function() {
  return /** @type{!Array<!proto.Protobuf.Simulation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Protobuf.Simulation, 1));
};


/**
 * @param {!Array<!proto.Protobuf.Simulation>} value
 * @return {!proto.Protobuf.Output} returns this
*/
proto.Protobuf.Output.prototype.setSimulationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Protobuf.Simulation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Protobuf.Simulation}
 */
proto.Protobuf.Output.prototype.addSimulations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Protobuf.Simulation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Protobuf.Output} returns this
 */
proto.Protobuf.Output.prototype.clearSimulationsList = function() {
  return this.setSimulationsList([]);
};


goog.object.extend(exports, proto.Protobuf);
